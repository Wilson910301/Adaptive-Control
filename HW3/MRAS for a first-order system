import numpy as np
import matplotlib.pyplot as plt

# 取樣間距 & 週期
interval, max_time = 0.01, 500
time = np.arange(0, max_time + interval, interval)
uc = np.sign(np.sin(np.pi * time / 10))  # square wave with period 20s

# 系統參數 a/b/am/bm/r
a, b, am, bm, r = 1, 0.5, 2, 2, 1

# 初始條件
theta_1 = 0
theta_2 = 0
y = 0
ym = 0

# 預先分配陣列空間
n = len(time)
all_u = np.zeros(n)
all_y = np.zeros(n)
all_ym = np.zeros(n)
all_e = np.zeros(n)
all_theta_1 = np.zeros(n)
all_theta_2 = np.zeros(n)

# 初值
all_theta_1[0] = theta_1
all_theta_2[0] = theta_2
all_y[0] = y
all_ym[0] = ym

# 主迴圈
for t in range(n - 1):
    all_u[t + 1] = all_theta_1[t] * uc[t] - all_theta_2[t] * all_y[t]
    all_e[t] = all_y[t] - all_ym[t]

    all_theta_1[t + 1] = all_theta_1[t] + (-r * all_ym[t] * (am / bm) * all_e[t]) * interval
    if uc[t] != 0:
        all_theta_2[t + 1] = all_theta_2[t] + (r * all_ym[t] * (am / bm) * all_y[t] / uc[t] * all_e[t]) * interval
    else:
        all_theta_2[t + 1] = all_theta_2[t]

    all_y[t + 1] = all_y[t] + (-a * all_y[t] + b * all_u[t]) * interval
    all_ym[t + 1] = all_ym[t] + (-am * all_ym[t] + bm * uc[t]) * interval

# 圖一：y 和 ym, u
plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.plot(time, all_y, '--', label='y')
plt.plot(time, all_ym, label='ym')
plt.title(f'r = {r}; y & ym')
plt.axis([0, 100, -1.5, 1.5])
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(time, all_u)
plt.title('u')
plt.axis([0, 100, -4, 4])
plt.tight_layout()

# 圖二：theta1 和 theta2
plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.axhline(4, linestyle='--', color='gray')
plt.plot(time, all_theta_1)
plt.title(f'r = {r}; θ₁')
plt.axis([0, 100, 0, 4.2])

plt.subplot(2, 1, 2)
plt.axhline(2, linestyle='--', color='gray')
plt.plot(time, all_theta_2)
plt.title('θ₂')
plt.axis([0, 100, -0.7, 2.2])
plt.tight_layout()

# 圖三：theta1 vs theta2
plt.figure(figsize=(6, 6))
y2 = all_theta_1 - a / b
plt.plot(all_theta_1, all_theta_2, label='θ₂ vs θ₁')
plt.plot(all_theta_1, y2, '--', label='θ₂ = θ₁ - a/b')
plt.title(f'r = {r}')
plt.axis([0, 4, -1, 2.2])
plt.legend()
plt.grid(True)

plt.show()
