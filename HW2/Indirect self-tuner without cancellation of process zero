import numpy as np
import matplotlib.pyplot as plt

# -------------------------------------------------------
# 參數 + 初值
# -------------------------------------------------------
N = 100                          # 總週期
time = np.arange(1, N + 1)       # 1..500（對應 MATLAB 1:500）

# --- uc：每 25 步切換正負 ---------------------------------
uc = np.ones(N)
for i in range(N // 25):
    if (i + 1) % 2 == 0:                       # MATLAB: mod(i,2)==0  (i從1起)
        uc[i * 25:(i + 1) * 25] = -1

# --- RLS 相關 ---------------------------------------------
lam = 0.99
P   = np.diag([100, 100, 1, 1]).astype(float)
I4  = np.eye(4)

# a1 a2 b0 b1 y1 y2 u1 u2 初值（與原碼一致）
a1 = a2 = 0.0
b0 = 0.01
b1 = 0.2
y1 = y2 = 0.0
u1 = 1.0
u2 = 0.0
theta = np.array([a1, a2, b0, b1], dtype=float)

# --- 預配置儲存陣列 ---------------------------------------
all_theta = np.zeros((4, N))
all_y     = np.zeros(N)
u         = np.zeros(N)
RST       = np.zeros((4, N))

# --- 真實系統固定係數 -------------------------------------
a1_real, a2_real = -1.6065, 0.6065
b0_real, b1_real =  0.1065, 0.0902

# -------------------------------------------------------
# RLS 主迴圈
# -------------------------------------------------------
for k in range(N):
    # ----- 真實系統輸出 y(k) -----------------------------
    y = -a1_real * y1 - a2_real * y2 + b0_real * u1 + b1_real * u2

    # ----- RLS 參數估計 ----------------------------------
    phi = np.array([-y1, -y2, u1, u2])
    den = lam + phi @ P @ phi                 # 純量
    K   = P @ phi / den                       # 4×1
    P   = (I4 - np.outer(K, phi)) @ P / lam
    e   = y - phi @ theta                     # 預測誤差
    theta = theta + K * e                     # 更新

    all_theta[:, k] = theta
    all_y[k]        = phi @ theta             # = y_hat

    # 拆出估計係數
    a1k, a2k, b0k, b1k = theta

    # ----- RST 係數（完全按原式） -------------------------
    a0  = 0.0
    am1 = -1.3205
    am2 =  0.4966
    bm0 =  0.1761

    # 讀起來方便一些
    b0sq = b0k**2
    b1sq = b1k**2

    den_rst = b1sq - a1k * b0k * b1k + a2k * b1sq

    r1 = ( a0*am2*b0sq
         + (a2k - am2 - a0*am1) * b0k * b1k
         + (a0 + am1 - a1k)     * b1sq ) / den_rst

    s0 = ( b1k*( a0*am1 - a2k - am1*a1k + a1k**2 + am2 - a1k*a0 )
         + b0k*( am1*a2k - a1k*a2k - a0*am2 + a0*a2k ) ) \
         / ( b1sq - a1k*b0k*b1k + a2k*b0sq )

    s1 = ( b1k*( a1k*a2k - am1*a2k + a0*am2 - a0*a2k )
         + b0k*( am2*a2k - a2k**2 - a0*am2*a1k + a0*am1*a2k ) ) \
         / ( b1sq - a1k*b0k*b1k + a2k*b0sq )

    t0 = (1 + am1 + am2) / (b0k + b1k)

    RST[:, k] = [r1, s0, s1, t0]

    # ----- 控制律 u(k) -----------------------------------
    u[k] = -r1 * u1 + t0 * uc[k] - s0 * y - s1 * y1

    # ----- 時間推進 (k→k+1) ------------------------------
    y2, y1 = y1, all_y[k]
    u2, u1 = u1, u[k]

# -------------------------------------------------------
# 繪圖（盡量還原 MATLAB 觀感）
# -------------------------------------------------------
plt.figure(figsize=(10, 12))

# uc & y
plt.subplot(3, 1, 1)
plt.plot(time, uc, label='uc', linestyle='--')
plt.plot(time, all_y, label='y_est')
plt.title('uc & y')
plt.xlabel('Time'); plt.legend(); plt.grid(True)
plt.xlim(0, 100); plt.ylim(-1.5, 2.2)

# u
plt.subplot(3, 1, 2)
plt.plot(time, u, label='u')
plt.title('u')
plt.xlabel('Time'); plt.grid(True)
plt.xlim(0, 100); plt.ylim(-3, 3)

# a, b 估計值
plt.subplot(3, 2, 5)   # 3 行 2 欄 → 左下
plt.axhline(-1.6065, linestyle='--', color='b')
plt.axhline( 0.6065, linestyle='--', color='r')
plt.step(time, all_theta[0], where='post', label='a1-hat')
plt.step(time, all_theta[1], where='post', label='a2-hat')
plt.title('a1 / a2'); plt.xlabel('Time'); plt.grid(True)
plt.ylim(-2, 1); plt.legend()

plt.subplot(3, 2, 6)   # 右下
plt.axhline(0.1065, linestyle='--', color='b')
plt.axhline(0.0902, linestyle='--', color='r')
plt.step(time, all_theta[2], where='post', label='b0-hat')
plt.step(time, all_theta[3], where='post', label='b1-hat')
plt.title('b0 / b1'); plt.xlabel('Time'); plt.grid(True)
plt.ylim(0.07, 0.3); plt.legend()

# RST 係數
plt.figure(figsize=(9, 4))
plt.axhline(0.1111, linestyle='--', color='r')
plt.axhline(1.6422, linestyle='--', color='b')
plt.axhline(-0.7471, linestyle='--', color='g')
plt.axhline(0.8951, linestyle='--', color='k')
plt.step(time, RST[0], where='post', color='r', label='r1')
plt.step(time, RST[1], where='post', color='b', label='s0')
plt.step(time, RST[2], where='post', color='g', label='s1')
plt.step(time, RST[3], where='post', color='k', label='t0')
plt.title('RST parameters'); plt.xlabel('Time')
plt.legend(); plt.grid(True)

plt.tight_layout()
plt.show()
